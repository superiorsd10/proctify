// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id
  username    String
  email       String       @unique
  tests       Test[]       @relation("UserTests")
  logs        Log[]        @relation("UserLogs")
  contests    Contest[]    @relation("UserContests")
  contestLogs ContestLog[] @relation("UserContestLogs")
  Submission  Submission[]
}

model Test {
  title         String
  createdBy     String
  link          String
  startTime     DateTime
  duration      Int
  code          String   @id
  createdByUser User     @relation("UserTests", fields: [createdBy], references: [id])
  logs          Log[]
}

model Log {
  id                         Int    @id @default(autoincrement())
  testId                     String
  userId                     String
  audioViolations            Int    @default(0)
  noFaceViolations           Int    @default(0)
  multipleFaceViolations     Int    @default(0)
  keypressViolations         Int    @default(0)
  rightClickViolations       Int    @default(0)
  windowChangeViolations     Int    @default(0)
  prohibitedObjectViolations Int    @default(0)
  ufmScore                   Int    @default(0)
  test                       Test   @relation(fields: [testId], references: [code])
  user                       User   @relation("UserLogs", fields: [userId], references: [id])
}

model Contest {
  id         String       @id
  title      String
  startTime  DateTime
  duration   Int
  userId     String
  user       User         @relation("UserContests", fields: [userId], references: [id])
  problems   Problem[]
  ContestLog ContestLog[]
  Submission Submission[]
}

model Problem {
  id             Int          @id @default(autoincrement())
  contestId      String
  contest        Contest      @relation(fields: [contestId], references: [id])
  descriptionUrl String
  inputFileUrl   String
  outputFileUrl  String
  sampleInput    String
  sampleOutput   String
  points         Int
  Submission     Submission[]
}

model ContestLog {
  id                         Int     @id @default(autoincrement())
  contestId                  String
  userId                     String
  audioViolations            Int     @default(0)
  noFaceViolations           Int     @default(0)
  multipleFaceViolations     Int     @default(0)
  keypressViolations         Int     @default(0)
  rightClickViolations       Int     @default(0)
  windowChangeViolations     Int     @default(0)
  prohibitedObjectViolations Int     @default(0)
  ufmScore                   Int     @default(0)
  contest                    Contest @relation(fields: [contestId], references: [id])
  user                       User    @relation("UserContestLogs", fields: [userId], references: [id])
}

model Submission {
  id            Int      @id @default(autoincrement())
  userId        String
  contestId     String
  problemId     Int
  problemNo     Int
  submittedTime DateTime
  solvedTime    Int // Difference between submittedTime and contest's startTime (in seconds)
  status        String // Possible values: "Pending", "Correct", "Wrong", "Error", etc.
  code          String
  language      String
  user          User     @relation(fields: [userId], references: [id])
  contest       Contest  @relation(fields: [contestId], references: [id])
  problem       Problem  @relation(fields: [problemId], references: [id])
}
